<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(285.0, 502.0)" />
		<node id="1" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table" position="(527.0, 439.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Object" sink_channel="Data" enabled="true" />
		<link id="1" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 1, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x05\x9f\x00\x00\x03\x83\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03\x83\x00\x00\x00\x00\x02\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x005\x00\x00\x05\x9f\x00\x00\x03\x83', 'scriptLibrary': [{'name': 'New script', 'script': 'from lxml import etree\nimport requests\nfrom bs4 import BeautifulSoup as bs\n\ndef getContent(link: str) -&gt; str:\n    webPage = requests.get(link)\n    return str(bs(webPage.content, "html.parser"))\n\ncontent: str = getContent("https://en.wikipedia.org/wiki/List_of_international_airports_by_country")\nhtml: etree.ElementBase = etree.HTML(content)\nprint(html)\nresultList: list[str]\nRELATIVE_ROOT: str = "//div[(@id=\'mw-content-text\')]/div"\nallNodes: list[etree.ElementBase] = html.xpath(RELATIVE_ROOT+"/*")\nh2Count: int = 0\ndata: list[list[str]] = [[]]\ni: int = 0\nlength: int = len(allNodes)\ncurrentRegion: str = ""\ncurrentSubRegion: str = ""\ncurrentCountry: str = ""\nwhile i &lt; length:\n    node: etree.ElementBase = allNodes[i]\n    if node.tag == \'h2\' and h2Count != 0:\n        currentRegion = node.xpath("./span[@class=\'mw-headline\'][1]")[0].text\n    elif node.tag == \'h2\':\n        h2Count += 1\n        i += 1\n        continue\n    if node.tag == \'h3\':\n        if i+1 &lt; length:\n            nextNode = allNodes[i + 1]\n            if nextNode.tag == \'table\':\n                currentCountry = node.xpath("normalize-space(.//text())")\n                currentSubRegion = \'\'\n            elif nextNode.tag == \'h4\':\n                currentSubRegion = node.xpath("normalize-space(.//text())")\n    if node.tag == \'h4\':\n        currentCountry = node.xpath("normalize-space(.//text())")\n    if node.tag == \'table\' and node.attrib[\'class\'] == "wikitable":\n        lines = node.xpath("./tbody/tr")\n        for line in lines:\n            cells: list[str] = line.xpath("./td//text()")\n            if len(cells) == 0:\n                continue\n            dataLine: list[str] = [currentRegion, currentSubRegion, currentCountry]\n            for cell in cells:\n                if cell.strip() != \'\':\n                    dataLine.append(cell.strip())\n            data.append(dataLine)\n    i += 1\nprint(data)', 'filename': None}, {'name': 'New script', 'script': 'from lxml import etree\nimport requests\nfrom bs4 import BeautifulSoup as bs\n\ndef getContent(link: str) -&gt; str:\n    webPage = requests.get(link)\n    return str(bs(webPage.content, "html.parser"))\n\ncontent = getContent("https://en.wikipedia.org/wiki/List_of_international_airports_by_country")\nhtml = etree.HTML(content)\nprint(html)\nresultList = []\nRELATIVE_ROOT: str = "//div[(@id=\'mw-content-text\')]/div"\nallNodes= html.xpath(RELATIVE_ROOT+"/*")\nh2Count: int = 0\ndata = [[]]\ni: int = 0\nlength: int = len(allNodes)\ncurrentRegion: str = ""\ncurrentSubRegion: str = ""\ncurrentCountry: str = ""\nwhile i &lt; length:\n    node = allNodes[i]\n    if node.tag == \'h2\' and h2Count != 0:\n        currentRegion = node.xpath("./span[@class=\'mw-headline\'][1]")[0].text\n    elif node.tag == \'h2\':\n        h2Count += 1\n        i += 1\n        continue\n    if node.tag == \'h3\':\n        if i+1 &lt; length:\n            nextNode = allNodes[i + 1]\n            if nextNode.tag == \'table\':\n                currentCountry = node.xpath("normalize-space(.//text())")\n                currentSubRegion = \'\'\n            elif nextNode.tag == \'h4\':\n                currentSubRegion = node.xpath("normalize-space(.//text())")\n    if node.tag == \'h4\':\n        currentCountry = node.xpath("normalize-space(.//text())")\n    if node.tag == \'table\' and node.attrib[\'class\'] == "wikitable":\n        lines = node.xpath("./tbody/tr")\n        for line in lines:\n            cells = line.xpath("./td//text()")\n            if len(cells) == 0:\n                continue\n            dataLine = [currentRegion, currentSubRegion, currentCountry]\n            for cell in cells:\n                if cell.strip() != \'\':\n                    dataLine.append(cell.strip())\n            data.append(dataLine)\n    i += 1\nprint(data)', 'filename': None}], 'scriptText': 'from lxml import etree\nimport requests\nfrom bs4 import BeautifulSoup as bs\n\ndef getContent(link: str) -&gt; str:\n    webPage = requests.get(link)\n    return str(bs(webPage.content, "html.parser"))\n\ncontent = getContent("https://en.wikipedia.org/wiki/List_of_international_airports_by_country")\nhtml = etree.HTML(content)\nprint(html)\nresultList = []\nRELATIVE_ROOT: str = "//div[(@id=\'mw-content-text\')]/div"\nallNodes= html.xpath(RELATIVE_ROOT+"/*")\nh2Count: int = 0\ndata = [[]]\ni: int = 0\nlength: int = len(allNodes)\ncurrentRegion: str = ""\ncurrentSubRegion: str = ""\ncurrentCountry: str = ""\nwhile i &lt; length:\n    node = allNodes[i]\n    if node.tag == \'h2\' and h2Count != 0:\n        currentRegion = node.xpath("./span[@class=\'mw-headline\'][1]")[0].text\n    elif node.tag == \'h2\':\n        h2Count += 1\n        i += 1\n        continue\n    if node.tag == \'h3\':\n        if i+1 &lt; length:\n            nextNode = allNodes[i + 1]\n            if nextNode.tag == \'table\':\n                currentCountry = node.xpath("normalize-space(.//text())")\n                currentSubRegion = \'\'\n            elif nextNode.tag == \'h4\':\n                currentSubRegion = node.xpath("normalize-space(.//text())")\n    if node.tag == \'h4\':\n        currentCountry = node.xpath("normalize-space(.//text())")\n    if node.tag == \'table\' and node.attrib[\'class\'] == "wikitable":\n        lines = node.xpath("./tbody/tr")\n        for line in lines:\n            cells = line.xpath("./td//text()")\n            if len(cells) == 0:\n                continue\n            dataLine = [currentRegion, currentSubRegion, currentCountry]\n            for cell in cells:\n                if cell.strip() != \'\':\n                    dataLine.append(cell.strip())\n            data.append(dataLine)\n    i += 1\nprint(data)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xab\x00\x00\x00k\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="1" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x016\x00\x00\x00\xac\x00\x00\x04U\x00\x00\x02\xbb\x00\x00\x016\x00\x00\x00\xc8\x00\x00\x04U\x00\x00\x02\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x016\x00\x00\x00\xc8\x00\x00\x04U\x00\x00\x02\xbb', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
